-- # Countdown
-- # 
-- # For each number in the INBOX,
-- # send that number to the
-- # OUTBOX, followed by all
-- # numbers down to (or up to)
-- # zero. It's a countdown!
-- # 
-- # You got new commands! They
-- # add ONE or subtract ONE from
-- # an item on the floor. The result
-- # is given back to you, and for
-- # your convenience, also written
-- # right back to the floor. BUMP!

-- FloorInitNode
  -- register -> floor[1]

-- LetStatementNode
  -- count -> floor[0]

-- WhileStatementNode
loop00:
  -- continue
  -- AssignmentStatementNode
    -- read
    INBOX
    -- write
    COPYTO 0 --$count
  
  -- IfStatementNode
  -- 01
    -- condition
      -- GreaterThanOrEqualToConditionNode
      COPYFROM 0 --$count
      -- compare 0
      JUMPN else01
    if01:
      -- block
      -- WhileStatementNode
      loop02:
        -- continue
        -- AssignmentStatementNode
          -- read
          COPYFROM 0 --$count
          -- write
          OUTBOX
        
        -- DecrementAssignmentStatementNode
        BUMPDN 0 --$count
        
        -- condition
        -- GreaterThanOrEqualToConditionNode
        COPYFROM 0 --$count
        -- compare 0
        JUMPN break02
        JUMP loop02
      break02:
    JUMP end01
    else01:
      -- block
      -- WhileStatementNode
      loop03:
        -- continue
        -- AssignmentStatementNode
          -- read
          COPYFROM 0 --$count
          -- write
          OUTBOX
        
        -- IncremenetAssignmentStatementNode
        BUMPUP 0 --$count
        
        -- condition
        -- LessThanOrEqualToConditionNode
        COPYFROM 0 --$count
        -- compare 0
        JUMPN loop03
        JUMPZ loop03
      break03:
  end01:
  
  -- condition
  JUMP loop00
break00: