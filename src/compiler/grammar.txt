PROGRAM         : STATEMENT_LIST | STATEMENT_LIST

STATEMENT_LIST  : STATEMENT STATEMENT_LIST | STATEMENT

STATEMENT       : FLOOR_INIT | LET | WHILE | IF | ASSIGN | INC_ASSIGN | DEC_ASSIGN
FLOOR_INIT      : floor size INT
LET             : let ID OPT_FLOOR_SLOT
WHILE           : while OPT_COND_EXP BLOCK
IF              : if CONDITION_EXP BLOCK OPT_ELSE
ASSIGN          : WRITE_REF = READ_EXP
INC_ASSIGN      : WRITE_REF += 1
DEC_ASSIGN      : WRITE_REF -= 1

OPT_FLOOR_SLOT  : FLOOR_SLOT | ε
FLOOR_SLOT      : floor [ POS_INT ]

OPT_ELSE        : ELSE | ε
ELSE            : else BLOCK

OPT_COND_EXP    : CONDITION_EXP | ε
CONDITION_EXP   : ( CONDITION )
CONDITION       : READ_REF != RIGHT_COMPARABLE | READ_REF == RIGHT_COMPARABLE | READ_REF > RIGHT_COMPARABLE | READ_REF < RIGHT_COMPARABLE
BLOCK           : { STATEMENT_LIST }

READ_EXP        : MATH_EXP | READ_REF
MATH_EXP        : BIN_MATH_EXP | NEG_EXP
BIN_MATH_EXP    : ADD_EXP | SUB_EXP
ADD_EXP         : READ_REF + READ_REF
SUB_EXP         : READ_REF - READ_REF
NEG_EXP         : - READ_REF

READ_REF        : INBOX | ID
RIGHT_COMPARABLE: READ_REF | ZERO_LITERAL
WRITE_REF       : OUTBOX | ID

INBOX           : inbox
OUTBOX          : outbox
ID              : [a-zA-z]+

ZERO_LITERAL    : 0
VALUE_LIST      : VALUE , VALUE | VALUE
VALUE           : LETTER | INT
LETTER          : [A-Z]
INT             : POS_INT | NEG_INT
NEG_INT         : -[1-9][0-9]*
POS_INT         : [1-9][0-9]* | 0
